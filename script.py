import pandas as pd
import google.generativeai as genai
import json
from datetime import datetime, timedelta
import os

from dotenv import load_dotenv
load_dotenv()

def configure_genai(api_key):
    genai.configure(api_key=api_key)

def get_and_filter_feeds(feeds, days=1):
    dfs = [pd.read_csv(feed) for feed in feeds]
    df = pd.concat(dfs)
    df['Date'] = pd.to_datetime(df['Date'])

    # Ensure 'Date' column is timezone-naive for comparison
    df['Date'] = df['Date'].dt.tz_localize(None)
    
    now = datetime.now()
    before = now - timedelta(days=days)

    df = df[(df['Date'] >= before) & (df['Date'] <= now)]
    df = df.sort_values(by='Date', ascending=False).drop_duplicates()
    df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
    df['Description'] = df['Description'].fillna(df['Plain Description'])
    df = df.drop(columns=['Plain Description'])
    return df

def format_df(df):
    output = [f"{row.Title}\n{row.Date}\n{row.Description}\nSource: {row.Link}" for row in df.itertuples()]
    return '\n--------------------\n'.join(output)

def generate_content(prompt, content):
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt.format(content=content))
    
    # Debug: Print the raw response for troubleshooting
    print("Raw response:", response.text)
    
    try:
        return json.loads(response.text)
    except json.JSONDecodeError as e:
        print("JSON decode error:", e)
        return None

def generate_html(data, date):
    if not data:
        return "<html><body><h1>No valid data to display</h1></body></html>"
    
    pretty_date = date.strftime('%B %d, %Y')
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DailySEO Updates - {pretty_date}</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
        <style>
            body {{
                background-color: #f5f5f5;
                color: #333;
            }}
            .navbar {{
                background-color: #0288d1;
            }}
            .brand-logo {{
                font-size: 2rem;
                font-weight: bold;
            }}
            .card {{
                margin: 20px 0;
            }}
            .card-title {{
                font-weight: bold;
            }}
            .card-content {{
                color: #000;
            }}
            .card-action .btn {{
                background-color: #0277bd;
            }}
            .container {{
                max-width: 100%;
            }}
            h2 {{
                color: #0288d1;
                margin-top: 40px;
            }}
            footer {{
                margin-top: 40px;
                padding: 20px;
                background-color: #e0e0e0;
                text-align: center;
            }}
        </style>
    </head>
    <body>
        <nav>
            <div class="nav-wrapper">
                <a href="#" class="brand-logo center">DailySEO</a>
            </div>
        </nav>
        <div class="container">
            <h1>Daily Updates - {pretty_date}</h1>
    """

    categories = set(item['Category'] for item in data)
    for category in categories:
        html += f"<h2>{category}</h2>"
        html += '<div class="row">'
        for item in data:
            if item['Category'] == category:
                html += f"""
                <div class="col s12">
                    <div class="card blue-grey lighten-4">
                        <div class="card-content">
                            <span class="card-title">{item['Title']}</span>
                            <p>{item['Description']}</p>
                        </div>
                        <div class="card-action">
                            <a href="{item['Link']}" class="btn">Visit Source</a>
                        </div>
                    </div>
                </div>
                """
        html += '</div>'

    html += """
        </div>
        <footer>
            <p>Content generated by AI using Google Gemini.</p>
            <p>For suggestions of other sources, please email <a href="mailto:jroakes@gmail.com">jroakes@gmail.com</a>.</p>
        </footer>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    </body>
    </html>
    """
    return html

def save_html(html_content, filename='web/index.html'):
    with open(filename, 'w') as file:
        file.write(html_content)

def save_json(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=4)

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, 'r') as file:
            return json.load(file)
    return []

def main():
    # API key should be set as an environment variable for security
    api_key = os.getenv('GOOGLE_API_KEY')
    if not api_key:
        raise ValueError("Google API key not set. Please set the GOOGLE_API_KEY environment variable.")
    
    configure_genai(api_key)

    feeds = ['https://rss.app/feeds/AABZSamcHV77NMiB.csv',
         'https://rss.app/feeds/sAy6ZaKW7CpN7IjW.csv',
         'https://rss.app/feeds/L9TaZ7ef3KY1OVSp.csv',
         'https://rss.app/feeds/zXT0futnCJaljpuB.csv',
         'https://rss.app/feeds/4fqrhqQwdYetXIiu.csv',
         'https://rss.app/feeds/WM0ES6W8raiIV5KN.csv',
         'https://rss.app/feeds/oFcjPHjOF13DeGeb.csv',
         'https://rss.app/feeds/lqj3El87pV7U2x1x.csv',
         'https://rss.app/feeds/FAjw4Wfyj8afW97N.csv',
         'https://rss.app/feeds/Y9nhDTA9fNMlpu69.csv',
         'https://rss.app/feeds/1HNaz8LPmdTmbMBA.csv',
         'https://rss.app/feeds/Vju8BCZrred11RCR.csv',
         'https://rss.app/feeds/ceLARR5M4ZQbm0Qs.csv',
         'https://rss.app/feeds/x92LuoEdMz23kaxF.csv',
         'https://rss.app/feeds/MxtGb5DgBO0Sdq76.csv',
         'https://rss.app/feeds/jSFu20bgbRearGVA.csv',
         'https://rss.app/feeds/wu0i0iKh6ZPRGn3t.csv',
         'https://rss.app/feeds/Ejq27y98poTCOoAF.csv',
         'https://rss.app/feeds/klsS5hw8EqNpv6xh.csv',
         'https://rss.app/feeds/3Ke56kL7J38dQPUj.csv',
         'https://rss.app/feeds/qni1oWlODGZ8sqV5.csv']

    # Load existing data for the day
    date = datetime.now()
    json_filename = f"data/data_{date.strftime('%Y_%m_%d')}.json"
    
    # Check if the JSON file for today exists
    if os.path.exists(json_filename):
        existing_data = load_json(json_filename)
    else:
        existing_data = []
    
    existing_titles = {item['Title'] for item in existing_data}

    df = get_and_filter_feeds(feeds)
    feed_text = format_df(df)

    prompt = """Please review the following content published recently and combine into a concise list of core events, news items, or other important updates.
    Please follow the following guidelines:
    1. Ignore content that is promotional or not serious.
    2. Be thorough and attempt to cover as many new items as possible.
    3. Items should be relevant to digital marketing, SEO, and paid marketing.
    4. Pick the best example where there are duplicate items covering the same content.
    5. Provide a link to the source of the content.
    6. DO NOT include any markdown formatting in your response, otherwise it will be interpreted as an error.
    7. These titles have already been covered so you can skip them. Existing titles: {existing_titles}

    Output should be valid JSON with a list of objects with the following keys:
    - Title
    - Category
    - Description
    - Link

    Content:
    {content}

    Valid JSON:
    """

    formatted_prompt = prompt.format(existing_titles=', '.join(existing_titles), content=feed_text)
    new_data = generate_content(formatted_prompt, feed_text)

    # Append new items to the existing data
    if new_data:
        for item in new_data:
            if item['Title'] not in existing_titles:
                existing_data.append(item)

    # Save the updated data to the JSON file for today
    save_json(existing_data, json_filename)

    html_output = generate_html(existing_data, date)
    save_html(html_output)

if __name__ == '__main__':
    main()
