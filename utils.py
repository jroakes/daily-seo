import os
import json
from datetime import datetime


def generate_html(data: list[dict], date: datetime) -> str:
    """
    Generates an HTML string based on the provided data and date.

    Parameters:
    data (list[dict]): List of data dictionaries to be included in the HTML.
    date (datetime): The date for the HTML content.

    Returns:
    str: Generated HTML content.
    """
    if not data:
        return "<html><body><h1>No valid data to display</h1></html></body>"

    pretty_date = date.strftime("%B %d, %Y")
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="icon" href="/daily-seo-logo.png">
        <title>DailySEO Updates - {pretty_date}</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
        <style>
        body {{
            background-color: #f5f5f5;
            color: #333;
        }}
        nav {{
            background-color: #333 !important;
        }}
        .brand-logo {{
            font-size: 2rem;
            font-weight: bold;
            animation: throb 3s infinite;
            background: linear-gradient(90deg, #ffeb3b, #fdd835);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }}
        @keyframes throb {{
            0%, 100% {{
                opacity: 1;
            }}
            50% {{
                opacity: 0.5;
            }}
        }}
        .card {{
            margin: 15px 0;
            padding: 10px;
        }}
        .card-title {{
            font-weight: bold;
        }}
        .card-content {{
            color: #000;
            padding: 10px;
        }}
        .card-action .btn {{
            background-color: #0277bd;
        }}
        .container {{
            max-width: 100%;
        }}
        h1 {{
            color: #333;
            margin-top: 40px;
            text-align: center;
            text-decoration: underline;
            text-decoration-color: #fdd835;
            margin-bottom: 10px;
            text-underline-offset: 10px;
        }}
        .date {{
            color: rgba(0, 0, 0, 0.6);
            font-size: 2rem;
            text-align: center;
            margin-bottom: 60px;
        }}
        h2 {{
            color: #0288d1;
            margin-top: 40px;
            font-size: 3rem;
            text-decoration: underline;
            text-decoration-style: dashed;
            text-decoration-color: #fdd835;
            text-underline-offset: 10px;
        }}
        footer {{
            margin-top: 40px;
            padding: 20px;
            background-color: #e0e0e0;
            text-align: center;
        }}
        </style>
    </head>
    <body>
        <nav>
        <div class="nav-wrapper">
            <a href="#" class="brand-logo center">DailySEO</a>
        </div>
        </nav>
        <div class="container">
        <h1>Latest Updates</h1>
        <div class="date">{pretty_date}</div>
    """

    categories = set(item["Category"] for item in data)
    for category in categories:
        html += f"<h2>{category}</h2>"
        html += '<div class="row">'
        for item in data:
            if item["Category"] == category:
                html += f"""
        <div class="col s12">
            <div class="card blue-grey lighten-4">
            <div class="card-content">
                <span class="card-title">{item['Title']}</span>
                <p>{item['Description']}</p>
            </div>
            <div class="card-action">
                <a href="{item['Link']}" class="btn" target="_blank">Visit Source</a>
            </div>
            </div>
        </div>
        """
        html += "</div>"

    html += """
        </div>
        <footer>
        <p>Content generated by AI using Google Gemini. Updated from various sources every four hours.</p>
        <p>For suggestions of new sources, please email <a href="mailto:jroakes@gmail.com">jroakes@gmail.com</a>.</p>
        <p>Feel free to build your own version by cloning <a href="https://github.com/jroakes/daily-seo" target="_blank">this repository</a>.</p>
        </footer>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    </body>
    </html>
    """
    return html


def save_html(html_content: str, filename: str = "docs/index.html") -> None:
    """
    Saves the provided HTML content to a specified file.

    Parameters:
    html_content (str): The HTML content to be saved.
    filename (str): The file name where the content will be saved (default is "docs/index.html").
    """
    with open(filename, "w") as file:
        file.write(html_content)


def save_json(data: dict, filename: str) -> None:
    """
    Saves the provided data to a specified JSON file.

    Parameters:
    data (dict): The data to be saved.
    filename (str): The file name where the data will be saved.
    """
    with open(filename, "w") as file:
        json.dump(data, file, indent=4)


def load_json(filename: str) -> dict:
    """
    Loads data from a specified JSON file.

    Parameters:
    filename (str): The file name from which to load the data.

    Returns:
    dict: Loaded data from the JSON file.
    """
    if os.path.exists(filename):
        with open(filename, "r") as file:
            return json.load(file)
    return {}
